
R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "PRSim"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('PRSim')
Loading required package: homtest
Loading required package: goftest
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("PRSim-package")
> ### * PRSim-package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: PRSim-package
> ### Title: Stochastic Simulation of Streamflow Time Series using Phase
> ###   Randomization
> ### Aliases: PRSim-package PRSim
> ### Keywords: package
> 
> ### ** Examples
> 
> ## Not run: 
> ##D demo("PRSim")
> ##D demo("PRSim-validate")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("fun_stoch_sim")
> ### * fun_stoch_sim
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pRsim
> ### Title: Simulate for one station
> ### Aliases: PRsim prsim
> ### Keywords: ts
> 
> ### ** Examples
> 
> data( runoff)
> out <- prsim( runoff[ runoff$YYYY<1980, ], "Qobs", 1, suppWarn=TRUE)
Detrending with (half-)length 15...
Starting 1 simulations:
.
Finished.
> # warnings() # as a follow-up to `suppWarn=TRUE`
> 
> ## Specifying particular CDFs:
> ## (1) example with the Generalized Extreme Value (GEV) distribution
> require("evd")
Loading required package: evd
> require("ismev")
Loading required package: ismev
Loading required package: mgcv
Loading required package: nlme
This is mgcv 1.8-28. For overview type 'help("mgcv-package")'.
> rGEV <- function(n, theta)   rgev(n, theta[1], theta[2], theta[3])
> pGEV <- function(x, theta)   pgev(x, theta[1], theta[2], theta[3])
> GEV_fit <- function( xdat, ...)   gev.fit( xdat, ...)$mle
>   
> ## Not run: 
> ##D  # The following call requires 5 seconds to execute
> ##D out <- prsim( runoff[ runoff$YYYY<1978, ], "Qobs", 1, 
> ##D     marginal="GEV", n_par=3, verbose=FALSE, marginalpar=FALSE,
> ##D     show=FALSE)  # Supress 'gev.fit' output.
> ## End(Not run)
> 
> ## (2) example with generalized Beta distribution of the second kind
> require( "GB2")
Loading required package: GB2
> rGB2 <- function(n, theta)  rgb2(n, theta[1], theta[2], theta[3], theta[4])
> pGB2 <- function(x, theta)  pgb2(x, theta[1], theta[2], theta[3], theta[4])
> GB2_fit <- function( xdat, ...)   ml.gb2( xdat, ...)$opt1$par
> 
> ## Not run: 
> ##D  # The following call requires half minute or so to execute. Some warnings are issued
> ##D out <- prsim( runoff[ runoff$YYYY<1987, ], "Qobs", 1, suppWarn=TRUE,
> ##D     marginal="GB2")
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()

detaching ‘package:GB2’, ‘package:ismev’, ‘package:mgcv’,
  ‘package:nlme’, ‘package:evd’

> nameEx("runoff")
> ### * runoff
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: runoff
> ### Title: Sample runoff of a catchment
> ### Aliases: runoff
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(runoff)
> str(runoff) 
'data.frame':	15706 obs. of  4 variables:
 $ YYYY: int  1975 1975 1975 1975 1975 1975 1975 1975 1975 1975 ...
 $ MM  : int  1 1 1 1 1 1 1 1 1 1 ...
 $ DD  : int  1 2 3 4 5 6 7 8 9 10 ...
 $ Qobs: num  2.05 1.75 1.62 1.58 1.47 ...
> runoff$timestamp <- paste(runoff$YYYY, runoff$MM, runoff$DD, sep=" ")
> runoff$timestamp <- as.POSIXct(strptime(runoff$timestamp,
+                                  format="%Y %m %d", tz="GMT"))
> plot(runoff$timestamp[1:1000], runoff$Qobs[1:1000], type="l", 
+   xlab="Time [d]", ylab=expression(paste("Discharge [m"^3,"/s]")))
> 
> 
> 
> cleanEx()
> nameEx("simulations")
> ### * simulations
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simulations
> ### Title: Simulated runoff
> ### Aliases: simulations
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(simulations)
> names(simulations) 
[1] "simulation" "kappa_pars" "p_val"     
> sim <- simulations$simulation
> dim(sim)
[1] 6570   56
> sim$day_id <- rep(seq(1:365), times=length(unique(sim$YYYY)))
> mean_obs <- aggregate(sim$Qobs, by=list(sim$day_id), FUN=mean, simplify=FALSE)
> plot(unlist(mean_obs[,2]),lty=1,lwd=1,col="black", ylab="Discharge [m3/s]",
+      xlab="Time [d]", main="Mean hydrographs", ylim=c(0,22), type="l")
> 
> for(r in 7:(length(names(sim))-1)){
+   mean_hydrograph <- aggregate(sim[,r], by=list(sim$day_id), FUN=mean, simplify=FALSE)
+   lines(mean_hydrograph, lty=1, lwd=1, col="gray")
+ }
> lines( mean_obs, lty=1, lwd=1, col="black")
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  2.156 0.072 2.227 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
