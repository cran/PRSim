
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "PRSim"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('PRSim')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("PRSim-package")
> ### * PRSim-package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: PRSim-package
> ### Title: Stochastic Simulation of Streamflow Time Series using Phase
> ###   Randomization
> ### Aliases: PRSim-package PRSim
> ### Keywords: package
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("fun_stoch_sim")
> ### * fun_stoch_sim
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pRsim
> ### Title: Simulate for one station
> ### Aliases: PRsim prsim
> ### Keywords: ts
> 
> ### ** Examples
> 
> data(runoff)
> out <- prsim( runoff[ runoff$YYYY<1980, ], "Qobs", 1, suppWarn=TRUE)
Detrending with (half-)length 15...
Starting 1 simulations:
.
Finished.
> # warnings() # as a follow-up to `suppWarn=TRUE`
> 
> 
> ## Specifying particular CDFs:
> ## (1) example with the Generalized Extreme Value (GEV) distribution
> require("evd")
Loading required package: evd
> require("ismev")
Loading required package: ismev
Loading required package: mgcv
Loading required package: nlme
This is mgcv 1.9-0. For overview type 'help("mgcv-package")'.
> rGEV <- function(n, theta)   rgev(n, theta[1], theta[2], theta[3])
> pGEV <- function(x, theta)   pgev(x, theta[1], theta[2], theta[3])
> GEV_fit <- function( xdat, ...)   gev.fit( xdat, ...)$mle
>   
> 
> ## (2) example with generalized Beta distribution of the second kind
> 
> 
> 
> 
> cleanEx()

detaching ‘package:ismev’, ‘package:mgcv’, ‘package:nlme’,
  ‘package:evd’

> nameEx("fun_stoch_sim_wave")
> ### * fun_stoch_sim_wave
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pRsim.wave
> ### Title: Simulate for multiple stations
> ### Aliases: PRsim.wave prsim.wave prsim_wave
> ### Keywords: ts
> 
> ### ** Examples
> 
> data(runoff_multi_sites)
> 
> ## Specifying particular CDFs:
> ## (1) example with the Generalized Extreme Value (GEV) distribution
> 
> ## (2) example with generalized Beta distribution of the second kind
> 
> 
> 
> 
> cleanEx()
> nameEx("runoff")
> ### * runoff
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: runoff
> ### Title: Sample runoff of a catchment
> ### Aliases: runoff
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(runoff)
> str(runoff) 
'data.frame':	15706 obs. of  4 variables:
 $ YYYY: int  1975 1975 1975 1975 1975 1975 1975 1975 1975 1975 ...
 $ MM  : int  1 1 1 1 1 1 1 1 1 1 ...
 $ DD  : int  1 2 3 4 5 6 7 8 9 10 ...
 $ Qobs: num  2.05 1.75 1.62 1.58 1.47 ...
> runoff$timestamp <- paste(runoff$YYYY, runoff$MM, runoff$DD, sep=" ")
> runoff$timestamp <- as.POSIXct(strptime(runoff$timestamp,
+                                  format="%Y %m %d", tz="GMT"))
> plot(runoff$timestamp[1:1000], runoff$Qobs[1:1000], type="l", 
+   xlab="Time [d]", ylab=expression(paste("Discharge [m"^3,"/s]")))
> 
> 
> 
> cleanEx()
> nameEx("runoff_multi_site_T")
> ### * runoff_multi_site_T
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: runoff_multi_site_T
> ### Title: Sample runoff and temperature data of two catchments with a
> ###   similar discharge regime
> ### Aliases: runoff_multi_site_T 'runoff multi site T'
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(runoff_multi_site_T)
> str(runoff_multi_site_T) 
List of 2
 $ :'data.frame':	11323 obs. of  5 variables:
  ..$ YYYY: chr [1:11323] "1980" "1980" "1980" "1980" ...
  ..$ MM  : chr [1:11323] "01" "01" "01" "01" ...
  ..$ DD  : chr [1:11323] "01" "02" "03" "04" ...
  ..$ Qobs: num [1:11323] 31.4 29.1 28.5 27.7 38.4 ...
  ..$ T   : num [1:11323] -3.372 -4.512 -4.938 -2.783 0.421 ...
 $ :'data.frame':	11323 obs. of  5 variables:
  ..$ YYYY: chr [1:11323] "1980" "1980" "1980" "1980" ...
  ..$ MM  : chr [1:11323] "01" "01" "01" "01" ...
  ..$ DD  : chr [1:11323] "01" "02" "03" "04" ...
  ..$ Qobs: num [1:11323] 0.2 0.16 0.17 0.17 0.16 0.15 0.15 0.14 0.14 0.13 ...
  ..$ T   : num [1:11323] -9.89 -11.27 -11.47 -7.39 -2.75 ...
> runoff_multi_site_T[[1]]$timestamp <- paste(runoff_multi_site_T[[1]]$YYYY, 
+ runoff_multi_site_T[[1]]$MM, runoff_multi_site_T[[1]]$DD, sep=" ")
> runoff_multi_site_T[[1]]$timestamp <- 
+ as.POSIXct(strptime(runoff_multi_site_T[[1]]$timestamp,format="%Y %m %d", tz="GMT"))
> plot(runoff_multi_site_T[[1]]$timestamp[1:1000], runoff_multi_site_T[[1]]$Qobs[1:1000], type="l", 
+   xlab="Time [d]", ylab=expression(paste("Discharge [m"^3,"/s]")))
> 
> 
> 
> cleanEx()
> nameEx("runoff_multi_sites")
> ### * runoff_multi_sites
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: runoff_multi_sites
> ### Title: Sample runoff of four catchments with a similar discharge regime
> ### Aliases: runoff_multi_sites 'runoff multi sites'
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(runoff_multi_sites)
> str(runoff_multi_sites) 
List of 4
 $ :'data.frame':	14235 obs. of  4 variables:
  ..$ YYYY: Factor w/ 36 levels "1980","1984",..: 1 1 1 1 1 1 1 1 1 1 ...
  ..$ MM  : Factor w/ 12 levels "01","02","03",..: 1 1 1 1 1 1 1 1 1 1 ...
  ..$ DD  : Factor w/ 31 levels "01","02","03",..: 1 2 3 4 5 6 7 8 9 10 ...
  ..$ Qobs: num [1:14235] 2520 2460 2130 1650 1350 1120 976 892 814 748 ...
 $ :'data.frame':	14235 obs. of  4 variables:
  ..$ YYYY: Factor w/ 39 levels "1980","1981",..: 1 1 1 1 1 1 1 1 1 1 ...
  ..$ MM  : Factor w/ 12 levels "01","02","03",..: 1 1 1 1 1 1 1 1 1 1 ...
  ..$ DD  : Factor w/ 31 levels "01","02","03",..: 1 2 3 4 5 6 7 8 9 10 ...
  ..$ Qobs: int [1:14235] 2970 2770 2250 1750 1520 1320 1210 1140 1080 1050 ...
 $ :'data.frame':	14235 obs. of  4 variables:
  ..$ YYYY: Factor w/ 39 levels "1980","1981",..: 1 1 1 1 1 1 1 1 1 1 ...
  ..$ MM  : Factor w/ 12 levels "01","02","03",..: 1 1 1 1 1 1 1 1 1 1 ...
  ..$ DD  : Factor w/ 31 levels "01","02","03",..: 1 2 3 4 5 6 7 8 9 10 ...
  ..$ Qobs: num [1:14235] 5180 5690 5610 5150 5240 5190 4600 4700 7950 8550 ...
 $ :'data.frame':	14235 obs. of  4 variables:
  ..$ YYYY: Factor w/ 39 levels "1980","1981",..: 1 1 1 1 1 1 1 1 1 1 ...
  ..$ MM  : Factor w/ 12 levels "01","02","03",..: 1 1 1 1 1 1 1 1 1 1 ...
  ..$ DD  : Factor w/ 31 levels "01","02","03",..: 1 2 3 4 5 6 7 8 9 10 ...
  ..$ Qobs: num [1:14235] 836 848 735 708 2210 1990 1220 944 854 944 ...
> runoff_multi_sites[[1]]$timestamp <- paste(runoff_multi_sites[[1]]$YYYY, 
+ runoff_multi_sites[[1]]$MM, runoff_multi_sites[[1]]$DD, sep=" ")
> runoff_multi_sites[[1]]$timestamp <- 
+ as.POSIXct(strptime(runoff_multi_sites[[1]]$timestamp,format="%Y %m %d", tz="GMT"))
> plot(runoff_multi_sites[[1]]$timestamp[1:1000], runoff_multi_sites[[1]]$Qobs[1:1000], type="l", 
+   xlab="Time [d]", ylab=expression(paste("Discharge [m"^3,"/s]")))
> 
> 
> 
> cleanEx()
> nameEx("simulations")
> ### * simulations
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simulations
> ### Title: Simulated runoff
> ### Aliases: simulations
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(simulations)
> names(simulations) 
[1] "simulation" "kappa_pars" "p_val"     
> sim <- simulations$simulation
> dim(sim)
[1] 6570   11
> sim$day_id <- rep(seq(1:365), times=length(unique(sim$YYYY)))
> mean_obs <- aggregate(sim$Qobs, by=list(sim$day_id), FUN=mean, simplify=FALSE)
> plot(unlist(mean_obs[,2]),lty=1,lwd=1,col="black", ylab="Discharge [m3/s]",
+      xlab="Time [d]", main="Mean hydrographs", ylim=c(0,22), type="l")
> 
> for(r in 7:(length(names(sim))-1)){
+   mean_hydrograph <- aggregate(sim[,r], by=list(sim$day_id), FUN=mean, simplify=FALSE)
+   lines(mean_hydrograph, lty=1, lwd=1, col="gray")
+ }
> lines( mean_obs, lty=1, lwd=1, col="black")
> 
> 
> 
> cleanEx()
> nameEx("simulations_multi_sites")
> ### * simulations_multi_sites
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simulations_multi_sites
> ### Title: Simulated runoff for four catchments
> ### Aliases: simulations.multi.sites simulations_multi_sites
> ### Keywords: datasets
> 
> ### ** Examples
> 
> oldpar <- par(mfrow = c(2, 1), mar = c(3, 3, 2, 1))
> ### greys
> col_vect_obs <- c('#cccccc','#969696','#636363','#252525')
> ### oranges
> col_vect_sim <- c('#fdbe85','#fd8d3c','#e6550d','#a63603')
> data(simulations_multi_sites)
> sim <- simulations_multi_sites
> dim(sim[[1]])
[1] 14235    10
> ### plot time series for multiple sites
> par(mfrow=c(2,1),mar=c(3,3,2,1))
> ### determine ylim
> ylim_max <- max(sim[[1]]$Qobs)*1.5
> ### observed
> plot(sim[[1]]$Qobs[1:1000],
+     ylab=expression(bold(
+         paste("Specific discharge [mm/d]"))),
+     xlab="Time [d]",type="l",col=col_vect_obs[1],
+     ylim=c(0,ylim_max),main='Observations')
> for(l in 2:4){
+   lines(sim[[l]]$Qobs[1:1000],col=col_vect_obs[l])
+ }
> legend('topleft',legend=c('Station 1','Station 2',
+         'Station 3','Station 4'),
+     lty=1,col=col_vect_obs[1:4])
> ### simulated (one run)
> plot(sim[[1]]$r1[1:1000],
+     ylab=expression(bold(paste("Specific discharge [mm/d]"))),
+     xlab="Time [d]",type="l",col=col_vect_sim[1],
+     ylim=c(0,ylim_max),
+     main='Stochastic simulations')
> for(l in 2:4){
+   lines(sim[[l]]$r1[1:1000],col=col_vect_sim[l])
+ }
> par(oldpar)
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("weather_multi_sites")
> ### * weather_multi_sites
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: weather_multi_sites
> ### Title: Sample temperature and precipitation of four catchments derived
> ###   from the ERA5-Land gridded dataset
> ### Aliases: weather_multi_sites 'weather multi sites'
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(weather_multi_sites)
> weather_multi_sites[[1]][[1]]$timestamp <- paste(weather_multi_sites[[1]][[1]]$YYYY, 
+ weather_multi_sites[[1]][[1]]$MM, weather_multi_sites[[1]][[1]]$DD, sep=" ")
> weather_multi_sites[[1]][[1]]$timestamp <- 
+ as.POSIXct(strptime(weather_multi_sites[[1]][[1]]$timestamp,
+ format="%Y %m %d", tz="GMT"))
> plot(weather_multi_sites[[1]][[1]]$timestamp[1:1000],
+ weather_multi_sites[[1]][[1]]$Qobs[1:1000], type="l", 
+ xlab="Time [d]", ylab=expression(paste("Temperature [degrees]")))
> 
> 
> 
> cleanEx()
> nameEx("weather_sim_multi_sites")
> ### * weather_sim_multi_sites
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: weather_sim_multi_sites
> ### Title: Simulated temperature and precipitation for two grid cells
> ### Aliases: weather.sim.multi.sites weather_sim_multi_sites
> ### Keywords: datasets
> 
> ### ** Examples
> 
> oldpar <- par(mfrow = c(2, 1), mar = c(3, 3, 2, 1))
> data(weather_sim_multi_sites)
> sim <- weather_sim_multi_sites
> ### define plotting colors
> col_sim <- adjustcolor("#fd8d3c",alpha=0.8)
> col_sim_tran <- adjustcolor("#fd8d3c",alpha=0.2)
> col_obs <- adjustcolor( "black", alpha.f = 0.2)
> ### greys
> col_vect_obs <- c('#cccccc','#969696','#636363','#252525')
> ### oranges
> col_vect_sim <- c('#fdbe85','#fd8d3c','#e6550d','#a63603')
> 
> ### plot time series for multiple sites
> 
> ### Temperature (first list entry)
> par(mfrow=c(2,1),mar=c(3,3,2,1))
> ### determine ylim
> ylim_max <- max(sim[[1]][[1]]$Temp)*1.5
> ### observed
> plot(sim[[1]][[1]]$Temp[1:1000],
+ ylab=expression(bold(paste("Temperature [degrees]"))),
+ xlab="Time [d]",type="l",col=col_vect_obs[1],
+ ylim=c(0,ylim_max),main='Observations')
> for(l in 2){
+   lines(sim[[l]][[1]]$Temp[1:1000],col=col_vect_obs[l])
+ }
> # legend('topleft',legend=c('Station 1','Station 2'
> # ),lty=1,col=col_vect_obs[1:2])
> ### simulated (one run)
> plot(sim[[1]][[1]]$r1[1:1000],
+ ylab=expression(bold(paste("Temperature [degrees]"))),
+ xlab="Time [d]",type="l",col=col_vect_sim[1],
+ ylim=c(0,ylim_max),main='Stochastic simulations')
> for(l in 2){
+   lines(sim[[l]][[1]]$r1[1:1000],col=col_vect_sim[l])
+ }
> 
> 
> ### precipitation (second list entry)
> ylim_max <- max(sim[[1]][[2]]$Prec)*1
> ### observed
> plot(sim[[1]][[2]]$Prec[1:1000],
+ ylab=expression(bold(paste("Precipitation [mm/d]"))),
+ xlab="Time [d]",type="l",col=col_vect_obs[1],
+ ylim=c(0,ylim_max),main='Observations')
> for(l in 2){
+   lines(sim[[l]][[2]]$Prec[1:1000],col=col_vect_obs[l])
+ }
> # legend('topleft',legend=c('Station 1','Station 2'
> # ),lty=1,col=col_vect_obs[1:2])
> ### simulated (one run)
> plot(sim[[1]][[2]]$r1[1:1000],
+ ylab=expression(bold(paste("Precipitation [mm/d]"))),
+ xlab="Time [d]",type="l",col=col_vect_sim[1],
+ ylim=c(0,ylim_max),main='Stochastic simulations')
> for(l in 2){
+   lines(sim[[l]][[2]]$r1[1:1000],col=col_vect_sim[l])
+ }
> par(oldpar)
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.757 0.048 1.815 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
